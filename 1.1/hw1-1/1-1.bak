#lang simply-scheme

;hw 2

;(define (squares nums)
;  (if (empty? nums)
;      '()
;      (se (square (first nums)) (squares (bf nums)))))
;
;(define (square x) (* x x))
;
;(squares '(2 4 6 7))


;hw 3

;(define (switch sent)
;  (se (changef (first sent)) (stepper (bf sent))))
;
;(define (changef w)
;  (if (equal? w 'You)
;      'I
;      w))
;
;(define (stepper sent)
;  (if (empty? sent)
;      '()
;      (se (change (first sent)) (stepper (bf sent)))))
;
;(define (change w)
;  (cond ((equal? w 'I) 'you)
;        ((equal? w 'i) 'you)
;        ((equal? w 'me) 'you)
;        ((equal? w 'Me) 'you)
;        ((equal? w 'you) 'me)
;        ((equal? w 'You) 'me)
;        (else w)))
;
;
;(switch '(You told me that I should wake you up))

;hw 3

;(define (order nums)
;  (cond ((check-if-last? nums) '#t)
;        ((equal? (check (first nums) (first (bf nums))) '#f) '#f)
;        (else (order (bf nums)))))
;
;(define (check x y)
;  (if (> x y)
;      '#f
;      '#t))
;
;(define (check-if-last? nums)
;  (equal? (bf nums) '()))

(order '(4 3 6))